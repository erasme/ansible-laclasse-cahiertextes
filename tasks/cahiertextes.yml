- set_fact: database_delegate_hostname="{{ inventory_hostname }}"
  when: "'{{ laclasse_cahiertextes_database.host }}' == 'localhost'"

- set_fact: database_delegate_hostname="{{ laclasse_cahiertextes_database.host }}"
  when: "'{{ laclasse_cahiertextes_database.host }}' != 'localhost'"

- set_fact: database_client_hostname="{{ inventory_hostname }}"
  when: "'{{ laclasse_cahiertextes_database.host }}' != 'localhost'"

- set_fact: database_client_hostname="localhost"
  when: "'{{ laclasse_cahiertextes_database.host }}' == 'localhost'"

- debug: msg="database_client_hostname {{database_client_hostname}}"
- debug: msg="database_delegate_hostname {{database_delegate_hostname}}"

- name: Creates deploy user
  user: name={{ laclasse_cahiertextes_deploy_user }} comment="laclasse user"
  notify: Restart laclasse-cahiertextes

- name: Creates ssh directory for user
  sudo: yes
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  file: 
    path=/home/{{ laclasse_cahiertextes_deploy_user }}/.ssh
    state=directory
    mode=700

- name: Adds Pronote key
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  template:
    src="../templates/pronote.j2"
    dest="~{{ laclasse_cahiertextes_deploy_user }}/.ssh/pronote"

- name: Creates deploy directory
  file: 
    path=~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/ 
    owner={{ laclasse_cahiertextes_deploy_user }} 
    state=directory
  notify: Restart laclasse-cahiertextes

- name: Open firewall
  shell: iptables -I OUTPUT -p tcp -m tcp -j ACCEPT -m comment --comment laclasse-cahiertextes-temp
  changed_when: false

- name: Checkout app
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  git:
    repo={{ laclasse_cahiertextes_repos }}
    dest=~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/
    version={{ laclasse_cahiertextes_version }}
    accept_hostkey=true
    force=yes
  register: new_version
  notify: Restart laclasse-cahiertextes

- name: Gets current tag
  shell: cd ~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/ && git describe --always --tag
  changed_when: false
  always_run: yes
  register: git_tag

- debug: var=git_tag.stdout

- name: Installs necessary prereqs
  apt: pkg={{ item }} state=latest
  with_items: laclasse_cahiertextes_packages
  notify: Restart laclasse-cahiertextes

- name: Check if a bundle is required
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/; bash -lc 'bundle check --no-color --path ~/bundler_shared/ || true'
  changed_when: bundle_required.stdout != "The Gemfile's dependencies are satisfied"
  register: bundle_required

- name: Bundles pack application
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/; bash -lc 'bundle pack --no-color --all --path  ~/bundler_shared/'
  when: bundle_required|changed

- name: Bundles application
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/; bash -lc 'bundle --no-color --deployment --path  ~/bundler_shared/'
  when: bundle_required|changed
  notify: Restart laclasse-cahiertextes

- name: Close firewall
  shell: iptables -D OUTPUT -p tcp -m tcp -j ACCEPT -m comment --comment laclasse-cahiertextes-temp
  changed_when: false

- name: Adds version.json
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  template:
    src="../templates/version.json.j2"
    dest="~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/public/version.json"
    backup=true

- name: Adds application config
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  template: src="../templates/{{ item }}.j2"
    dest="~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/config/{{ item }}"
    owner={{ laclasse_cahiertextes_deploy_user }}
    group={{ laclasse_cahiertextes_deploy_user }}
    mode=640
  register: new_config
  with_items:
    - constants.rb
    - options.rb
    - database.rb
    - puma.rb
  notify: Restart laclasse-cahiertextes
  tags: test

- name: Adds client side application config
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  template:
    src="../templates/constants.js.j2"
    dest="~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/public/app/js/constants.js"

- name: Creates PID and log dirs
  file: dest={{ item }}/laclasse-cahiertextes/
    owner={{ laclasse_cahiertextes_deploy_user }}
    group={{ laclasse_cahiertextes_deploy_user }}
    mode=750
    state=directory
  with_items:
    - "{{laclasse_log_parent_dir}}"
  notify: Restart laclasse-cahiertextes

- name: Installs prereqs on db server
  apt: pkg=python-mysqldb state=latest
  delegate_to: "{{database_delegate_hostname}}"
  when: not laclasse_skip_database

- name: Creates database if required
  mysql_db: name={{ laclasse_cahiertextes_database.name }} state=present
  delegate_to: "{{ database_delegate_hostname }}"
  register: db_created
  when: not laclasse_skip_database
  notify: Restart laclasse-cahiertextes

- name: Creates database user
  mysql_user:
    user: "{{ laclasse_cahiertextes_database.user }}"
    password: "{{ laclasse_cahiertextes_database.password }}"
    priv: "{{ laclasse_cahiertextes_database.name }}.*:ALL"
    host: "{{ database_client_hostname }}"
  delegate_to: "{{database_delegate_hostname}}"
  register: dbuser_created
  when: not laclasse_skip_database
  notify: Restart laclasse-cahiertextes

- name: Check if a migration is required
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/; bash -lc 'RACK_ENV={{ laclasse_environment }} bundle exec rake db:migrations'
  register: migration_required
  failed_when: false
  changed_when: false  

- name: Check if a migration is needed
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  always_run: true
  shell: >
    cd ~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/; bash -lc 'RACK_ENV={{ laclasse_environment }} bundle exec rake  db:check_migrate'
  register: db_migrate_required
  changed_when: db_migrate_required.rc == 1
  when: new_version|changed  
  failed_when: false

- name: Migrates Database
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/; bash -lc 'RACK_ENV={{ laclasse_environment }} bundle exec rake db:migrations'
  when:  new_version|changed and db_migrate_required.rc == 1
  notify: Restart laclasse-cahiertextes
  
- name: Binstubs puma
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/; bash -lc "bundle binstubs puma"
  register: puma_has_been_binstubbed
  changed_when: '"Skipped puma since it already exists" in puma_has_been_binstubbed'
  notify: Restart laclasse-cahiertextes

- name: Deploys init script
  template: src="../templates/laclasse-cahiertextes.init.j2" dest=/etc/init.d/laclasse-cahiertextes mode=0770
  notify: Restart laclasse-cahiertextes

- name: Registers init script
  #shell: update-rc.d laclasse-cahiertextes defaults
  service: name=laclasse-cahiertextes enabled=yes
  notify: Restart laclasse-cahiertextes

- name: Preprocesses assets
  sudo_user: "{{ laclasse_cahiertextes_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_cahiertextes_deploy_user }}/laclasse-cahiertextes/; bash -lc 'RACK_ENV={{ laclasse_environment }} bundle exec rake preprocess_assets:{{ laclasse_environment }}'
  when: new_version|changed
  notify: Restart laclasse-cahiertextes

# - name: Adds monit monitoring
#   template: src="../templates/laclasse-cahiertextes.monit.j2" dest="/etc/monit/conf.d/laclasse-cahiertextes"
#   when: monit is defined
#   notify: Restart monit

- name: Check if firewall is opened
  shell: iptables-save
  register: needs_iptables
  changed_when: needs_iptables.stdout.find("laclasse-cahiertextes") == -1
  when: laclasse_environment == 'production' and firewall is defined

- name: Open firewall
  shell: iptables -A TCP_IN -p tcp -m tcp --dport {{ laclasse_cahiertextes_port}} -j ACCEPT -m comment --comment laclasse-cahiertextes
  ignore_errors: true
  when: needs_iptables | changed and laclasse_environment == 'production'

- name: Saves firewall
  shell: iptables-save > {{ firewall.rules_file }}
  when: needs_iptables | changed and laclasse_environment == 'production'

